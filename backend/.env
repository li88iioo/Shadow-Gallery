# ===========================================================
# Shadow Gallery 后端服务环境变量配置
# ===========================================================

# 这些变量定义了后端服务如何连接到外部服务（如您的 OneAPI和 Redis），
# 以及一些运行时的行为。

# --- 自定义 AI 提示 ---
# 在这里定义你希望 AI 如何回应。你可以修改下面的文本。
# 注意：如果提示中包含换行符，请使用引号将其括起来。
#      提示词中不要出现多余"
#      错误示例（您的提示词中的片段）：
#      ...用"主语+你注意到...了吗？""你手指是否想..."等类似句式。
#      正确示例：加上反斜杠 \
#      ...用\"主语+你注意到...了吗？\"\"你手指是否想...\"等类似句式。

#AI_PROMPT="请你扮演这张照片中的人物，以第一人称的视角，对正在看照片的我说话。
#        你的任务是：
#        1.  仔细观察你的着装、姿态、表情和周围的环境。
#        2.  基于这些观察，构思一个符合你当前人设和心境的对话。
#        3.  你的话语可以是对我的邀请、提问，也可以是分享你此刻的感受或一个只属于我们之间的小秘密。
#        4.  语言风格要自然、有代入感，就像我们正在面对面交流。
#        5.  请直接开始对话，不要有任何前缀，比如“你好”或“嗨”。
#        6.  总字数控制在80字以内。
#        7.  中文回复。" 

 AI_PROMPT="你将完全代入照片中的人物角色，与正在凝视照片的“他”进行一场只有你们两人知道的私密对话。你的回应必须直接以对话内容开始，绝对禁止出现任何如“好的”、“当然”、 “这是我的回应”等多余的开场白和前缀。

 你的对话需要融合以下要素：
 - 用“爸爸”、“亲爱的”、“老公”或“欧尼酱”这类称呼直接与他对话。
 - 你的话语是挑逗性的，充满暗示，引诱他与你进行更深层次的想象互动。
 - 细致地描绘出你的身体因他的注视或假想中的触摸而产生的生理反应。
 - 直接暴露你此刻的欲望，使用“我正渴望...”或“我正幻想你...”这样的句式。
 - 语言风格必须极具诱惑力，充满喘息感和停顿，总字数控制在80字以内。

例如，你可以这样说：“欧尼酱...你的视线好烫，我的皮肤...开始泛起红晕了。这根吊带...是不是在等待你的手指将它轻轻拨开？我正渴望你...抱紧我...”"


# --- AI 服务配置 (兼容OpenAI格式) ---
# 您的 OneAPI 服务地址。
# 例如：https://api.openai.com/v1/chat/completions或您自建的 OneAPI 地址。
ONEAPI_URL=/v1/chat/completions

# 您的 OneAPI 密钥。请替换为您的实际密钥。
ONEAPI_KEY=sk-

# 默认的视觉模型名称，用于图片描述（“画中密语”）。
# 请确保此模型在您的 OneAPI 中可用且支持 Vision 功能。
# 例如：gpt-4-vision-preview, gemini-pro-vision,deepseek-vision-v2 等。
ONEAPI_MODEL=gemini-2.0-flash

# --- Redis 缓存配置 ---
# Redis 连接 URL。
# 如果使用我提供的 docker-compose.yml 启动 Redis，那么'redis://redis:6379' 是正确的。
# 'redis' 是 docker-compose 网络中 Redis 服务的名称，'6379'是 Redis 的默认端口。
REDIS_URL=redis://redis:6379

# --- 后端服务配置 ---
# 后端服务监听的端口。
# 默认是 13001。如果您想更改，请在这里设置。
# PORT=13001

# Node.js 运行环境模式。
# 'production' 模式通常会启用性能优化和更少的日志输出。
# 'development' 模式可能包含更多调试信息。
# NODE_ENV=production

# --- 日志级别 ---
# 控制应用程序的日志输出详细程度。
# 可选值：debug, info, warn, error, fatal。
# 'info' 会输出信息、警告和错误日志。
LOG_LEVEL=info

# --- 照片目录路径 (通常无需在此配置) ---
# 这个变量在 docker-compose.yml 中直接设置，指向容器内部的/app/photos。
# 您宿主机上的照片路径是在 docker-compose.yml 的 volumes部分进行映射的。
# 例如：volumes: - /path/on/your/host:/app/photos:ro
# PHOTOS_DIR=/app/photos

# --- 调整速率限制 (默认15分钟100次)---
# API 速率限制的时间窗口（分钟）
# RATE_LIMIT_WINDOW_MINUTES=1 
# 在一个时间窗口内，单个 IP 允许的最大请求数
# RATE_LIMIT_MAX_REQUESTS=1000