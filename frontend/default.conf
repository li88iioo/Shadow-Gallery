upstream backend_api {
    server backend:13001;
    keepalive 64;           # 复用到后端的长连接
}

# Nginx 微缓存（位于 http 上下文内的 conf.d 可声明）
proxy_cache_path /var/cache/nginx/micro levels=1:2 keys_zone=microcache:10m max_size=200m inactive=10m use_temp_path=off;

# 带鉴权请求的微缓存绕过标记（有 Authorization 则跳过微缓存）
map $http_authorization $microcache_bypass {
    default 0;
    ""      0;
    ~.+      1;
}

server {
    listen 80;
    server_name localhost;

    root /usr/share/nginx/html;
    index index.html;

    # --- 日志记录 ---
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # --- 安全头 ---
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    add_header Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: blob:; connect-src 'self' https: http:;" always;

    # 启用压缩，减少 API 传输体积
    gzip on;
    gzip_comp_level 5;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_types application/json application/javascript text/javascript text/plain text/css application/xml;


    # --- 路由和静态资源 ---
    location / {
        try_files $uri $uri/ /index.html;
    }
    
    # --- 后端代理 ---
    location /thumbs/ {
        proxy_pass http://backend_api;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_socket_keepalive on;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /static/ {
        proxy_pass http://backend_api;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_socket_keepalive on;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # --- API 微缓存（优先匹配） ---
    location ~ ^/api/browse(/.*)?$ {
        client_max_body_size 15m;
        proxy_pass http://backend_api;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_socket_keepalive on;
        proxy_connect_timeout 3s;
        proxy_read_timeout 60s;
        proxy_send_timeout 30s;
        proxy_next_upstream error timeout http_502 http_504;
        proxy_next_upstream_tries 2;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # 微缓存（仅 GET/HEAD）
        proxy_cache microcache;
        proxy_cache_methods GET HEAD;
        proxy_cache_key "$scheme$proxy_host$request_uri$http_authorization$http_x_user_id";
        proxy_cache_valid 200 30s;
        # 明确 4xx 不缓存
        proxy_cache_valid 400 401 403 404 0;
        proxy_cache_lock on;
        proxy_cache_use_stale updating error timeout http_500 http_502 http_503 http_504;
        add_header X-Proxy-Cache $upstream_cache_status always;

        # 鉴权请求跳过微缓存
        proxy_no_cache $microcache_bypass;
        proxy_cache_bypass $microcache_bypass;
    }

    location = /api/search {
        client_max_body_size 15m;
        proxy_pass http://backend_api;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_socket_keepalive on;
        proxy_connect_timeout 3s;
        proxy_read_timeout 60s;
        proxy_send_timeout 30s;
        proxy_next_upstream error timeout http_502 http_504;
        proxy_next_upstream_tries 2;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # 搜索微缓存时间更短
        proxy_cache microcache;
        proxy_cache_methods GET HEAD;
        proxy_cache_key "$scheme$proxy_host$request_uri$http_authorization$http_x_user_id";
        proxy_cache_valid 200 15s;
        # 明确 4xx 不缓存
        proxy_cache_valid 400 401 403 404 0;
        proxy_cache_lock on;
        proxy_cache_use_stale updating error timeout http_500 http_502 http_503 http_504;
        add_header X-Proxy-Cache $upstream_cache_status always;

        # 鉴权请求跳过微缓存
        proxy_no_cache $microcache_bypass;
        proxy_cache_bypass $microcache_bypass;
    }

    location /api/ {
        client_max_body_size 15m;
        proxy_pass http://backend_api; 
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_socket_keepalive on;
        proxy_connect_timeout 3s;
        proxy_read_timeout 60s;
        proxy_send_timeout 30s;
        proxy_next_upstream error timeout http_502 http_504;
        proxy_next_upstream_tries 2;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # 禁止访问 source map 文件
    location ~* \.map$ {
        return 404;
    }
}